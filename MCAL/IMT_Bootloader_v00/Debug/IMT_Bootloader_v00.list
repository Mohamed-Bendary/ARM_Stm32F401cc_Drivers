
IMT_Bootloader_v00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a98  08001a98  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001aa0  08001aa0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa0  08001aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000004  08001aac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08001aac  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001244  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000762  00000000  00000000  000212bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00021a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017e  00000000  00000000  00021c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001645  00000000  00000000  00021dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016dd  00000000  00000000  00023403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005698  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000072c  00000000  00000000  0002a178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0002a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001a74 	.word	0x08001a74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001a74 	.word	0x08001a74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <FMI_voidFlashWrite>:
	/* DeSelect the erase operation*/
	CLR_BIT(FMI->CR ,CR_SER);

}
void FMI_voidFlashWrite(u32 Copy_u32Address , u16 *Copy_u16Array , u16 Copy_u16Array_Length)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	4613      	mov	r3, r2
 80004e0:	80fb      	strh	r3, [r7, #6]
	u16 Local_u16Counter;

	/* Wait if the flash is busy */
	while(GET_BIT(FMI->SR , SR_BSY) == 1);
 80004e2:	bf00      	nop
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <FMI_voidFlashWrite+0xb8>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d0f8      	beq.n	80004e4 <FMI_voidFlashWrite+0x10>

	/* Unlock CR register by KEYR*/
	if(GET_BIT(FMI->CR,CR_LOCK) == 1)
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <FMI_voidFlashWrite+0xb8>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	0fdb      	lsrs	r3, r3, #31
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d105      	bne.n	800050c <FMI_voidFlashWrite+0x38>
	{
		FMI->KEYR = KEY1;
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000502:	4a23      	ldr	r2, [pc, #140]	; (8000590 <FMI_voidFlashWrite+0xbc>)
 8000504:	605a      	str	r2, [r3, #4]
		FMI->KEYR = KEY2;
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <FMI_voidFlashWrite+0xc0>)
 800050a:	605a      	str	r2, [r3, #4]
	}

	/* Select the element size */
	//Masking the old value of the size of the elements being flashed at a time
	FMI->CR &= ~((u32)(0b11 << 8));
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	4a1e      	ldr	r2, [pc, #120]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000516:	6113      	str	r3, [r2, #16]

	//Adding the user new size value specified of our chip stm32f401cc
	FMI->CR |=(u32)((PSIZE)<<8);
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6113      	str	r3, [r2, #16]

	/* Select the programming mode*/
	SET_BIT(FMI->CR ,CR_PG);
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	4a18      	ldr	r2, [pc, #96]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6113      	str	r3, [r2, #16]

	/* Write the data to the flash memory */
	for(Local_u16Counter = 0 ;Local_u16Counter<Copy_u16Array_Length;Local_u16Counter++)
 8000530:	2300      	movs	r3, #0
 8000532:	82fb      	strh	r3, [r7, #22]
 8000534:	e01a      	b.n	800056c <FMI_voidFlashWrite+0x98>
	{
		//Casting the user address as a pointer and derefrencing it with the value to be flashed
		*(volatile u16*)Copy_u32Address = Copy_u16Array[Local_u16Counter];
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	441a      	add	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	8812      	ldrh	r2, [r2, #0]
 8000542:	801a      	strh	r2, [r3, #0]
		/*Adding (2) to the decimal value of the given address so next iteration i will point to the next 16bits
		 *  to be flashed,,if address given is 0x8000 1111 first i made a pointer of u16 type to point to this address
		 *  so it can write only 16 bits in the array,, then i make the address 0x8000 1113 to point to the next
		 *  address to flash the next 2 bytes
		 * */
		Copy_u32Address+=2;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3302      	adds	r3, #2
 8000548:	60fb      	str	r3, [r7, #12]

		/* Wait for the writing operation to be completed*/
		while(GET_BIT(FMI->SR , SR_BSY) == 1);
 800054a:	bf00      	nop
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0c1b      	lsrs	r3, r3, #16
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b01      	cmp	r3, #1
 8000558:	d0f8      	beq.n	800054c <FMI_voidFlashWrite+0x78>

		/* Clear the EOP bit indicating the end of this flashing operation*/
		SET_BIT(FMI->SR,SR_EOP);
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	60d3      	str	r3, [r2, #12]
	for(Local_u16Counter = 0 ;Local_u16Counter<Copy_u16Array_Length;Local_u16Counter++)
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	3301      	adds	r3, #1
 800056a:	82fb      	strh	r3, [r7, #22]
 800056c:	8afa      	ldrh	r2, [r7, #22]
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	429a      	cmp	r2, r3
 8000572:	d3e0      	bcc.n	8000536 <FMI_voidFlashWrite+0x62>

	}
	/* DeSelect the flashing(programming) operation*/
	CLR_BIT(FMI->CR ,CR_PG);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <FMI_voidFlashWrite+0xb8>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <FMI_voidFlashWrite+0xb8>)
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6113      	str	r3, [r2, #16]


}
 8000580:	bf00      	nop
 8000582:	371c      	adds	r7, #28
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40023c00 	.word	0x40023c00
 8000590:	45670123 	.word	0x45670123
 8000594:	cdef89ab 	.word	0xcdef89ab

08000598 <MGPIO_voidSetPinDirection>:
 * 									INPUT_ANALOG
 * Options for copy_u8Speed:- LOW_SPEED - MEDIUM_SPEED - HIGH_SPEED - VERY_HIGH_SPEED
 */
/******************************************************************************************/
void MGPIO_voidSetPinDirection(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8Direction, u8 copy_u8Speed)
{
 8000598:	b490      	push	{r4, r7}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4604      	mov	r4, r0
 80005a0:	4608      	mov	r0, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	461a      	mov	r2, r3
 80005a6:	4623      	mov	r3, r4
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	4603      	mov	r3, r0
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	460b      	mov	r3, r1
 80005b0:	717b      	strb	r3, [r7, #5]
 80005b2:	4613      	mov	r3, r2
 80005b4:	713b      	strb	r3, [r7, #4]
	switch (copy_u8PORT)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	f000 8367 	beq.w	8000c8c <MGPIO_voidSetPinDirection+0x6f4>
 80005be:	2b02      	cmp	r3, #2
 80005c0:	f300 8514 	bgt.w	8000fec <MGPIO_voidSetPinDirection+0xa54>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d004      	beq.n	80005d2 <MGPIO_voidSetPinDirection+0x3a>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	f000 81af 	beq.w	800092c <MGPIO_voidSetPinDirection+0x394>
		}
		GPIOC->OSPEEDR &= ~(3 << (copy_u8PIN * 2));
		GPIOC->OSPEEDR |= (copy_u8Speed << (copy_u8PIN * 2));
		break;
	}
}
 80005ce:	f000 bd0d 	b.w	8000fec <MGPIO_voidSetPinDirection+0xa54>
		if ((copy_u8Direction >= OUTPUT_PUSH_PULL) && (copy_u8Direction <= OUTPUT_PUSH_OPEN_DRAIN_DOWN))
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d91b      	bls.n	8000610 <MGPIO_voidSetPinDirection+0x78>
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	2b0a      	cmp	r3, #10
 80005dc:	d818      	bhi.n	8000610 <MGPIO_voidSetPinDirection+0x78>
			SET_BIT(GPIOA->MODER, copy_u8PIN * 2);
 80005de:	4ba3      	ldr	r3, [pc, #652]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a9f      	ldr	r2, [pc, #636]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA->MODER, ((copy_u8PIN * 2) + 1));
 80005f4:	4b9d      	ldr	r3, [pc, #628]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	79ba      	ldrb	r2, [r7, #6]
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	3201      	adds	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	43d2      	mvns	r2, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a98      	ldr	r2, [pc, #608]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800060a:	400b      	ands	r3, r1
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e058      	b.n	80006c2 <MGPIO_voidSetPinDirection+0x12a>
		else if ((copy_u8Direction >= AF_PUSH_PULL) && (copy_u8Direction <= AF_PUSH_OPEN_DRAIN_DOWN))
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d91b      	bls.n	800064e <MGPIO_voidSetPinDirection+0xb6>
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	2b10      	cmp	r3, #16
 800061a:	d818      	bhi.n	800064e <MGPIO_voidSetPinDirection+0xb6>
			CLR_BIT(GPIOA->MODER, copy_u8PIN * 2);
 800061c:	4b93      	ldr	r3, [pc, #588]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	0052      	lsls	r2, r2, #1
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	43d2      	mvns	r2, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a8f      	ldr	r2, [pc, #572]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000630:	400b      	ands	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOA->MODER, ((copy_u8PIN * 2) + 1));
 8000634:	4b8d      	ldr	r3, [pc, #564]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	3201      	adds	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a89      	ldr	r2, [pc, #548]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	e039      	b.n	80006c2 <MGPIO_voidSetPinDirection+0x12a>
		else if ((copy_u8Direction >= INPUT_FLOATING) && (copy_u8Direction <= INPUT_PULL_DOWN))
 800064e:	797b      	ldrb	r3, [r7, #5]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01c      	beq.n	800068e <MGPIO_voidSetPinDirection+0xf6>
 8000654:	797b      	ldrb	r3, [r7, #5]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d819      	bhi.n	800068e <MGPIO_voidSetPinDirection+0xf6>
			CLR_BIT(GPIOA->MODER, copy_u8PIN * 2);
 800065a:	4b84      	ldr	r3, [pc, #528]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	79ba      	ldrb	r2, [r7, #6]
 8000660:	0052      	lsls	r2, r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	43d2      	mvns	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4a7f      	ldr	r2, [pc, #508]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800066e:	400b      	ands	r3, r1
 8000670:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOA->MODER, ((copy_u8PIN * 2) + 1));
 8000672:	4b7e      	ldr	r3, [pc, #504]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	79ba      	ldrb	r2, [r7, #6]
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	3201      	adds	r2, #1
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f202 	lsl.w	r2, r1, r2
 8000682:	43d2      	mvns	r2, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a79      	ldr	r2, [pc, #484]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000688:	400b      	ands	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e019      	b.n	80006c2 <MGPIO_voidSetPinDirection+0x12a>
		else if (copy_u8Direction == INPUT_ANALOG)
 800068e:	797b      	ldrb	r3, [r7, #5]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d116      	bne.n	80006c2 <MGPIO_voidSetPinDirection+0x12a>
			SET_BIT(GPIOA->MODER, copy_u8PIN * 2);
 8000694:	4b75      	ldr	r3, [pc, #468]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a71      	ldr	r2, [pc, #452]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOA->MODER, ((copy_u8PIN * 2) + 1));
 80006aa:	4b70      	ldr	r3, [pc, #448]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	3201      	adds	r2, #1
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a6b      	ldr	r2, [pc, #428]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
		switch (copy_u8Direction)
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	dc3a      	bgt.n	800073e <MGPIO_voidSetPinDirection+0x1a6>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dc19      	bgt.n	8000700 <MGPIO_voidSetPinDirection+0x168>
 80006cc:	e116      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
 80006ce:	3b08      	subs	r3, #8
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	f200 8113 	bhi.w	80008fc <MGPIO_voidSetPinDirection+0x364>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <MGPIO_voidSetPinDirection+0x144>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	08000825 	.word	0x08000825
 80006e0:	08000871 	.word	0x08000871
 80006e4:	080008b7 	.word	0x080008b7
 80006e8:	0800074b 	.word	0x0800074b
 80006ec:	08000795 	.word	0x08000795
 80006f0:	080007dd 	.word	0x080007dd
 80006f4:	08000825 	.word	0x08000825
 80006f8:	08000871 	.word	0x08000871
 80006fc:	080008b7 	.word	0x080008b7
 8000700:	461a      	mov	r2, r3
 8000702:	2301      	movs	r3, #1
 8000704:	4093      	lsls	r3, r2
 8000706:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800070a:	2a00      	cmp	r2, #0
 800070c:	bf14      	ite	ne
 800070e:	2201      	movne	r2, #1
 8000710:	2200      	moveq	r2, #0
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	d13d      	bne.n	8000794 <MGPIO_voidSetPinDirection+0x1fc>
 8000718:	f003 0288 	and.w	r2, r3, #136	; 0x88
 800071c:	2a00      	cmp	r2, #0
 800071e:	bf14      	ite	ne
 8000720:	2201      	movne	r2, #1
 8000722:	2200      	moveq	r2, #0
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d158      	bne.n	80007dc <MGPIO_voidSetPinDirection+0x244>
 800072a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d106      	bne.n	800074a <MGPIO_voidSetPinDirection+0x1b2>
 800073c:	e0de      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
 800073e:	2b10      	cmp	r3, #16
 8000740:	f300 80dc 	bgt.w	80008fc <MGPIO_voidSetPinDirection+0x364>
 8000744:	2b08      	cmp	r3, #8
 8000746:	dac2      	bge.n	80006ce <MGPIO_voidSetPinDirection+0x136>
 8000748:	e0d8      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
			CLR_BIT(GPIOA->OTYPER, copy_u8PIN);
 800074a:	4b48      	ldr	r3, [pc, #288]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	43d2      	mvns	r2, r2
 8000758:	4611      	mov	r1, r2
 800075a:	4a44      	ldr	r2, [pc, #272]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800075c:	400b      	ands	r3, r1
 800075e:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 8000760:	4b42      	ldr	r3, [pc, #264]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	43d2      	mvns	r2, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a3e      	ldr	r2, [pc, #248]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000774:	400b      	ands	r3, r1
 8000776:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 8000778:	4b3c      	ldr	r3, [pc, #240]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	3201      	adds	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	43d2      	mvns	r2, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a37      	ldr	r2, [pc, #220]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800078e:	400b      	ands	r3, r1
 8000790:	60d3      	str	r3, [r2, #12]
			break;
 8000792:	e0b3      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
			CLR_BIT(GPIOA->OTYPER, copy_u8PIN);
 8000794:	4b35      	ldr	r3, [pc, #212]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	79ba      	ldrb	r2, [r7, #6]
 800079a:	2101      	movs	r1, #1
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a31      	ldr	r2, [pc, #196]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007a6:	400b      	ands	r3, r1
 80007a8:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	79ba      	ldrb	r2, [r7, #6]
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007bc:	430b      	orrs	r3, r1
 80007be:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	79ba      	ldrb	r2, [r7, #6]
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	3201      	adds	r2, #1
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007d6:	400b      	ands	r3, r1
 80007d8:	60d3      	str	r3, [r2, #12]
			break;
 80007da:	e08f      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
			CLR_BIT(GPIOA->OTYPER, copy_u8PIN);
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	43d2      	mvns	r2, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007ee:	400b      	ands	r3, r1
 80007f0:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	79ba      	ldrb	r2, [r7, #6]
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	43d2      	mvns	r2, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000806:	400b      	ands	r3, r1
 8000808:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	3201      	adds	r2, #1
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800081e:	430b      	orrs	r3, r1
 8000820:	60d3      	str	r3, [r2, #12]
			break;
 8000822:	e06b      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
			SET_BIT(GPIOA->OTYPER, copy_u8PIN);
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	4611      	mov	r1, r2
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000834:	430b      	orrs	r3, r1
 8000836:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	43d2      	mvns	r2, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 800084c:	400b      	ands	r3, r1
 800084e:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	3201      	adds	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	43d2      	mvns	r2, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a01      	ldr	r2, [pc, #4]	; (800086c <MGPIO_voidSetPinDirection+0x2d4>)
 8000866:	400b      	ands	r3, r1
 8000868:	60d3      	str	r3, [r2, #12]
			break;
 800086a:	e047      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
 800086c:	40020000 	.word	0x40020000
			SET_BIT(GPIOA->OTYPER, copy_u8PIN);
 8000870:	4b9f      	ldr	r3, [pc, #636]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a9c      	ldr	r2, [pc, #624]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000880:	430b      	orrs	r3, r1
 8000882:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 8000884:	4b9a      	ldr	r3, [pc, #616]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	79ba      	ldrb	r2, [r7, #6]
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	2101      	movs	r1, #1
 800088e:	fa01 f202 	lsl.w	r2, r1, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000896:	430b      	orrs	r3, r1
 8000898:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 800089a:	4b95      	ldr	r3, [pc, #596]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	79ba      	ldrb	r2, [r7, #6]
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	3201      	adds	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	43d2      	mvns	r2, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a90      	ldr	r2, [pc, #576]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008b0:	400b      	ands	r3, r1
 80008b2:	60d3      	str	r3, [r2, #12]
			break;
 80008b4:	e022      	b.n	80008fc <MGPIO_voidSetPinDirection+0x364>
			SET_BIT(GPIOA->OTYPER, copy_u8PIN);
 80008b6:	4b8e      	ldr	r3, [pc, #568]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a8a      	ldr	r2, [pc, #552]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOA->PUPDR, copy_u8PIN * 2);
 80008ca:	4b89      	ldr	r3, [pc, #548]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	43d2      	mvns	r2, r2
 80008da:	4611      	mov	r1, r2
 80008dc:	4a84      	ldr	r2, [pc, #528]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008de:	400b      	ands	r3, r1
 80008e0:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOA->PUPDR, ((copy_u8PIN * 2) + 1));
 80008e2:	4b83      	ldr	r3, [pc, #524]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	79ba      	ldrb	r2, [r7, #6]
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	3201      	adds	r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a7e      	ldr	r2, [pc, #504]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	60d3      	str	r3, [r2, #12]
			break;
 80008fa:	bf00      	nop
		GPIOA->OSPEEDR &= ~(3 << (copy_u8PIN * 2));
 80008fc:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a78      	ldr	r2, [pc, #480]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000910:	400b      	ands	r3, r1
 8000912:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (copy_u8Speed << (copy_u8PIN * 2));
 8000914:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	7939      	ldrb	r1, [r7, #4]
 800091a:	79ba      	ldrb	r2, [r7, #6]
 800091c:	0052      	lsls	r2, r2, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4611      	mov	r1, r2
 8000924:	4a72      	ldr	r2, [pc, #456]	; (8000af0 <MGPIO_voidSetPinDirection+0x558>)
 8000926:	430b      	orrs	r3, r1
 8000928:	6093      	str	r3, [r2, #8]
		break;
 800092a:	e35f      	b.n	8000fec <MGPIO_voidSetPinDirection+0xa54>
		if ((copy_u8Direction >= OUTPUT_PUSH_PULL) && (copy_u8Direction <= OUTPUT_PUSH_OPEN_DRAIN_DOWN))
 800092c:	797b      	ldrb	r3, [r7, #5]
 800092e:	2b04      	cmp	r3, #4
 8000930:	d91b      	bls.n	800096a <MGPIO_voidSetPinDirection+0x3d2>
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	2b0a      	cmp	r3, #10
 8000936:	d818      	bhi.n	800096a <MGPIO_voidSetPinDirection+0x3d2>
			SET_BIT(GPIOB->MODER, copy_u8PIN * 2);
 8000938:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	79ba      	ldrb	r2, [r7, #6]
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	4a6a      	ldr	r2, [pc, #424]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 800094a:	430b      	orrs	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB->MODER, ((copy_u8PIN * 2) + 1));
 800094e:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	3201      	adds	r2, #1
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	43d2      	mvns	r2, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a64      	ldr	r2, [pc, #400]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000964:	400b      	ands	r3, r1
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e058      	b.n	8000a1c <MGPIO_voidSetPinDirection+0x484>
		else if ((copy_u8Direction >= AF_PUSH_PULL) && (copy_u8Direction <= AF_PUSH_OPEN_DRAIN_DOWN))
 800096a:	797b      	ldrb	r3, [r7, #5]
 800096c:	2b0a      	cmp	r3, #10
 800096e:	d91b      	bls.n	80009a8 <MGPIO_voidSetPinDirection+0x410>
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	2b10      	cmp	r3, #16
 8000974:	d818      	bhi.n	80009a8 <MGPIO_voidSetPinDirection+0x410>
			CLR_BIT(GPIOB->MODER, copy_u8PIN * 2);
 8000976:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	79ba      	ldrb	r2, [r7, #6]
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	43d2      	mvns	r2, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a5a      	ldr	r2, [pc, #360]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 800098a:	400b      	ands	r3, r1
 800098c:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOB->MODER, ((copy_u8PIN * 2) + 1));
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	3201      	adds	r2, #1
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e039      	b.n	8000a1c <MGPIO_voidSetPinDirection+0x484>
		else if ((copy_u8Direction >= INPUT_FLOATING) && (copy_u8Direction <= INPUT_PULL_DOWN))
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01c      	beq.n	80009e8 <MGPIO_voidSetPinDirection+0x450>
 80009ae:	797b      	ldrb	r3, [r7, #5]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d819      	bhi.n	80009e8 <MGPIO_voidSetPinDirection+0x450>
			CLR_BIT(GPIOB->MODER, copy_u8PIN * 2);
 80009b4:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	79ba      	ldrb	r2, [r7, #6]
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a4b      	ldr	r2, [pc, #300]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009c8:	400b      	ands	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOB->MODER, ((copy_u8PIN * 2) + 1));
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	3201      	adds	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	43d2      	mvns	r2, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009e2:	400b      	ands	r3, r1
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e019      	b.n	8000a1c <MGPIO_voidSetPinDirection+0x484>
		else if (copy_u8Direction == INPUT_ANALOG)
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d116      	bne.n	8000a1c <MGPIO_voidSetPinDirection+0x484>
			SET_BIT(GPIOB->MODER, copy_u8PIN * 2);
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOB->MODER, ((copy_u8PIN * 2) + 1));
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	79ba      	ldrb	r2, [r7, #6]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	3201      	adds	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a37      	ldr	r2, [pc, #220]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6013      	str	r3, [r2, #0]
		switch (copy_u8Direction)
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dc3b      	bgt.n	8000a9a <MGPIO_voidSetPinDirection+0x502>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	dc1a      	bgt.n	8000a5c <MGPIO_voidSetPinDirection+0x4c4>
 8000a26:	e119      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	f200 8116 	bhi.w	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <MGPIO_voidSetPinDirection+0x4a0>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000b89 	.word	0x08000b89
 8000a3c:	08000bd1 	.word	0x08000bd1
 8000a40:	08000c17 	.word	0x08000c17
 8000a44:	08000aa7 	.word	0x08000aa7
 8000a48:	08000af9 	.word	0x08000af9
 8000a4c:	08000b41 	.word	0x08000b41
 8000a50:	08000b89 	.word	0x08000b89
 8000a54:	08000bd1 	.word	0x08000bd1
 8000a58:	08000c17 	.word	0x08000c17
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4093      	lsls	r3, r2
 8000a62:	f003 0254 	and.w	r2, r3, #84	; 0x54
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2201      	movne	r2, #1
 8000a6c:	2200      	moveq	r2, #0
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d141      	bne.n	8000af8 <MGPIO_voidSetPinDirection+0x560>
 8000a74:	f003 0288 	and.w	r2, r3, #136	; 0x88
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2201      	movne	r2, #1
 8000a7e:	2200      	moveq	r2, #0
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d15c      	bne.n	8000b40 <MGPIO_voidSetPinDirection+0x5a8>
 8000a86:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d106      	bne.n	8000aa6 <MGPIO_voidSetPinDirection+0x50e>
 8000a98:	e0e0      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
 8000a9a:	2b10      	cmp	r3, #16
 8000a9c:	f300 80de 	bgt.w	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	dac1      	bge.n	8000a28 <MGPIO_voidSetPinDirection+0x490>
 8000aa4:	e0da      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
			CLR_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	2101      	movs	r1, #1
 8000aae:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab2:	43d2      	mvns	r2, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000ab8:	400b      	ands	r3, r1
 8000aba:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	79ba      	ldrb	r2, [r7, #6]
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	0052      	lsls	r2, r2, #1
 8000adc:	3201      	adds	r2, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4a02      	ldr	r2, [pc, #8]	; (8000af4 <MGPIO_voidSetPinDirection+0x55c>)
 8000aea:	400b      	ands	r3, r1
 8000aec:	60d3      	str	r3, [r2, #12]
			break;
 8000aee:	e0b5      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400
			CLR_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000af8:	4ba3      	ldr	r3, [pc, #652]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	79ba      	ldrb	r2, [r7, #6]
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a9f      	ldr	r2, [pc, #636]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000b0e:	4b9e      	ldr	r3, [pc, #632]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	79ba      	ldrb	r2, [r7, #6]
 8000b14:	0052      	lsls	r2, r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a9a      	ldr	r2, [pc, #616]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000b24:	4b98      	ldr	r3, [pc, #608]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	0052      	lsls	r2, r2, #1
 8000b2c:	3201      	adds	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4a93      	ldr	r2, [pc, #588]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	60d3      	str	r3, [r2, #12]
			break;
 8000b3e:	e08d      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
			CLR_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000b40:	4b91      	ldr	r3, [pc, #580]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	79ba      	ldrb	r2, [r7, #6]
 8000b46:	2101      	movs	r1, #1
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4a8d      	ldr	r2, [pc, #564]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b52:	400b      	ands	r3, r1
 8000b54:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000b56:	4b8c      	ldr	r3, [pc, #560]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	fa01 f202 	lsl.w	r2, r1, r2
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a87      	ldr	r2, [pc, #540]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	3201      	adds	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a81      	ldr	r2, [pc, #516]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	60d3      	str	r3, [r2, #12]
			break;
 8000b86:	e069      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
			SET_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a7c      	ldr	r2, [pc, #496]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	79ba      	ldrb	r2, [r7, #6]
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	4611      	mov	r1, r2
 8000bae:	4a76      	ldr	r2, [pc, #472]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000bb4:	4b74      	ldr	r3, [pc, #464]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	79ba      	ldrb	r2, [r7, #6]
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a6f      	ldr	r2, [pc, #444]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bca:	400b      	ands	r3, r1
 8000bcc:	60d3      	str	r3, [r2, #12]
			break;
 8000bce:	e045      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
			SET_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000bd0:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a6a      	ldr	r2, [pc, #424]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000be4:	4b68      	ldr	r3, [pc, #416]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	79ba      	ldrb	r2, [r7, #6]
 8000bea:	0052      	lsls	r2, r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4a64      	ldr	r2, [pc, #400]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000bfa:	4b63      	ldr	r3, [pc, #396]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	3201      	adds	r2, #1
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	43d2      	mvns	r2, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a5e      	ldr	r2, [pc, #376]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c10:	400b      	ands	r3, r1
 8000c12:	60d3      	str	r3, [r2, #12]
			break;
 8000c14:	e022      	b.n	8000c5c <MGPIO_voidSetPinDirection+0x6c4>
			SET_BIT(GPIOB->OTYPER, copy_u8PIN);
 8000c16:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	79ba      	ldrb	r2, [r7, #6]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a58      	ldr	r2, [pc, #352]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOB->PUPDR, copy_u8PIN * 2);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	0052      	lsls	r2, r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4a52      	ldr	r2, [pc, #328]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c3e:	400b      	ands	r3, r1
 8000c40:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOB->PUPDR, ((copy_u8PIN * 2) + 1));
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	79ba      	ldrb	r2, [r7, #6]
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	3201      	adds	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	4611      	mov	r1, r2
 8000c54:	4a4c      	ldr	r2, [pc, #304]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c56:	430b      	orrs	r3, r1
 8000c58:	60d3      	str	r3, [r2, #12]
			break;
 8000c5a:	bf00      	nop
		GPIOB->OSPEEDR &= ~(3 << (copy_u8PIN * 2));
 8000c5c:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	79ba      	ldrb	r2, [r7, #6]
 8000c62:	0052      	lsls	r2, r2, #1
 8000c64:	2103      	movs	r1, #3
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	43d2      	mvns	r2, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c70:	400b      	ands	r3, r1
 8000c72:	6093      	str	r3, [r2, #8]
		GPIOB->OSPEEDR |= (copy_u8Speed << (copy_u8PIN * 2));
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	7939      	ldrb	r1, [r7, #4]
 8000c7a:	79ba      	ldrb	r2, [r7, #6]
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a40      	ldr	r2, [pc, #256]	; (8000d88 <MGPIO_voidSetPinDirection+0x7f0>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6093      	str	r3, [r2, #8]
		break;
 8000c8a:	e1af      	b.n	8000fec <MGPIO_voidSetPinDirection+0xa54>
		if ((copy_u8Direction >= OUTPUT_PUSH_PULL) && (copy_u8Direction <= OUTPUT_PUSH_OPEN_DRAIN_DOWN))
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d91b      	bls.n	8000cca <MGPIO_voidSetPinDirection+0x732>
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	2b0a      	cmp	r3, #10
 8000c96:	d818      	bhi.n	8000cca <MGPIO_voidSetPinDirection+0x732>
			SET_BIT(GPIOC->MODER, copy_u8PIN * 2);
 8000c98:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a38      	ldr	r2, [pc, #224]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC->MODER, ((copy_u8PIN * 2) + 1));
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	0052      	lsls	r2, r2, #1
 8000cb6:	3201      	adds	r2, #1
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	43d2      	mvns	r2, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000cc4:	400b      	ands	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e058      	b.n	8000d7c <MGPIO_voidSetPinDirection+0x7e4>
		else if ((copy_u8Direction >= AF_PUSH_PULL) && (copy_u8Direction <= AF_PUSH_OPEN_DRAIN_DOWN))
 8000cca:	797b      	ldrb	r3, [r7, #5]
 8000ccc:	2b0a      	cmp	r3, #10
 8000cce:	d91b      	bls.n	8000d08 <MGPIO_voidSetPinDirection+0x770>
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	2b10      	cmp	r3, #16
 8000cd4:	d818      	bhi.n	8000d08 <MGPIO_voidSetPinDirection+0x770>
			CLR_BIT(GPIOC->MODER, copy_u8PIN * 2);
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	79ba      	ldrb	r2, [r7, #6]
 8000cdc:	0052      	lsls	r2, r2, #1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	43d2      	mvns	r2, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000cea:	400b      	ands	r3, r1
 8000cec:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOC->MODER, ((copy_u8PIN * 2) + 1));
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	0052      	lsls	r2, r2, #1
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e039      	b.n	8000d7c <MGPIO_voidSetPinDirection+0x7e4>
		else if ((copy_u8Direction >= INPUT_FLOATING) && (copy_u8Direction <= INPUT_PULL_DOWN))
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d01c      	beq.n	8000d48 <MGPIO_voidSetPinDirection+0x7b0>
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d819      	bhi.n	8000d48 <MGPIO_voidSetPinDirection+0x7b0>
			CLR_BIT(GPIOC->MODER, copy_u8PIN * 2);
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	79ba      	ldrb	r2, [r7, #6]
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d28:	400b      	ands	r3, r1
 8000d2a:	6013      	str	r3, [r2, #0]
			CLR_BIT(GPIOC->MODER, ((copy_u8PIN * 2) + 1));
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	0052      	lsls	r2, r2, #1
 8000d34:	3201      	adds	r2, #1
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d42:	400b      	ands	r3, r1
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e019      	b.n	8000d7c <MGPIO_voidSetPinDirection+0x7e4>
		else if (copy_u8Direction == INPUT_ANALOG)
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d116      	bne.n	8000d7c <MGPIO_voidSetPinDirection+0x7e4>
			SET_BIT(GPIOC->MODER, copy_u8PIN * 2);
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOC->MODER, ((copy_u8PIN * 2) + 1));
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	0052      	lsls	r2, r2, #1
 8000d6c:	3201      	adds	r2, #1
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <MGPIO_voidSetPinDirection+0x7f4>)
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6013      	str	r3, [r2, #0]
		switch (copy_u8Direction)
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	2b07      	cmp	r3, #7
 8000d80:	dc3f      	bgt.n	8000e02 <MGPIO_voidSetPinDirection+0x86a>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dc1e      	bgt.n	8000dc4 <MGPIO_voidSetPinDirection+0x82c>
 8000d86:	e119      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	3b08      	subs	r3, #8
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	f200 8112 	bhi.w	8000fbc <MGPIO_voidSetPinDirection+0xa24>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <MGPIO_voidSetPinDirection+0x808>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000ee9 	.word	0x08000ee9
 8000da4:	08000f31 	.word	0x08000f31
 8000da8:	08000f77 	.word	0x08000f77
 8000dac:	08000e0f 	.word	0x08000e0f
 8000db0:	08000e59 	.word	0x08000e59
 8000db4:	08000ea1 	.word	0x08000ea1
 8000db8:	08000ee9 	.word	0x08000ee9
 8000dbc:	08000f31 	.word	0x08000f31
 8000dc0:	08000f77 	.word	0x08000f77
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4093      	lsls	r3, r2
 8000dca:	f003 0254 	and.w	r2, r3, #84	; 0x54
 8000dce:	2a00      	cmp	r2, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2201      	movne	r2, #1
 8000dd4:	2200      	moveq	r2, #0
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d13d      	bne.n	8000e58 <MGPIO_voidSetPinDirection+0x8c0>
 8000ddc:	f003 0288 	and.w	r2, r3, #136	; 0x88
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2201      	movne	r2, #1
 8000de6:	2200      	moveq	r2, #0
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d158      	bne.n	8000ea0 <MGPIO_voidSetPinDirection+0x908>
 8000dee:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d106      	bne.n	8000e0e <MGPIO_voidSetPinDirection+0x876>
 8000e00:	e0dc      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
 8000e02:	2b10      	cmp	r3, #16
 8000e04:	f300 80da 	bgt.w	8000fbc <MGPIO_voidSetPinDirection+0xa24>
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	dac1      	bge.n	8000d90 <MGPIO_voidSetPinDirection+0x7f8>
 8000e0c:	e0d6      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			CLR_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000e0e:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	79ba      	ldrb	r2, [r7, #6]
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4a76      	ldr	r2, [pc, #472]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e20:	400b      	ands	r3, r1
 8000e22:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	0052      	lsls	r2, r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	43d2      	mvns	r2, r2
 8000e34:	4611      	mov	r1, r2
 8000e36:	4a70      	ldr	r2, [pc, #448]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e38:	400b      	ands	r3, r1
 8000e3a:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	3201      	adds	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	43d2      	mvns	r2, r2
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4a69      	ldr	r2, [pc, #420]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e52:	400b      	ands	r3, r1
 8000e54:	60d3      	str	r3, [r2, #12]
			break;
 8000e56:	e0b1      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			CLR_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000e58:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	79ba      	ldrb	r2, [r7, #6]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a63      	ldr	r2, [pc, #396]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	79ba      	ldrb	r2, [r7, #6]
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	79ba      	ldrb	r2, [r7, #6]
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	3201      	adds	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	4611      	mov	r1, r2
 8000e98:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000e9a:	400b      	ands	r3, r1
 8000e9c:	60d3      	str	r3, [r2, #12]
			break;
 8000e9e:	e08d      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			CLR_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000ea0:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000eb6:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	79ba      	ldrb	r2, [r7, #6]
 8000ebc:	0052      	lsls	r2, r2, #1
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	79ba      	ldrb	r2, [r7, #6]
 8000ed4:	0052      	lsls	r2, r2, #1
 8000ed6:	3201      	adds	r2, #1
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	60d3      	str	r3, [r2, #12]
			break;
 8000ee6:	e069      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			SET_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000ee8:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000efc:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	0052      	lsls	r2, r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f10:	400b      	ands	r3, r1
 8000f12:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	3201      	adds	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	60d3      	str	r3, [r2, #12]
			break;
 8000f2e:	e045      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			SET_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6053      	str	r3, [r2, #4]
			SET_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4611      	mov	r1, r2
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f56:	430b      	orrs	r3, r1
 8000f58:	60d3      	str	r3, [r2, #12]
			CLR_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	79ba      	ldrb	r2, [r7, #6]
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	3201      	adds	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	43d2      	mvns	r2, r2
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f70:	400b      	ands	r3, r1
 8000f72:	60d3      	str	r3, [r2, #12]
			break;
 8000f74:	e022      	b.n	8000fbc <MGPIO_voidSetPinDirection+0xa24>
			SET_BIT(GPIOC->OTYPER, copy_u8PIN);
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	79ba      	ldrb	r2, [r7, #6]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	4611      	mov	r1, r2
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f86:	430b      	orrs	r3, r1
 8000f88:	6053      	str	r3, [r2, #4]
			CLR_BIT(GPIOC->PUPDR, copy_u8PIN * 2);
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	79ba      	ldrb	r2, [r7, #6]
 8000f90:	0052      	lsls	r2, r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	60d3      	str	r3, [r2, #12]
			SET_BIT(GPIOC->PUPDR, ((copy_u8PIN * 2) + 1));
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	0052      	lsls	r2, r2, #1
 8000faa:	3201      	adds	r2, #1
 8000fac:	2101      	movs	r1, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	60d3      	str	r3, [r2, #12]
			break;
 8000fba:	bf00      	nop
		GPIOC->OSPEEDR &= ~(3 << (copy_u8PIN * 2));
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	6093      	str	r3, [r2, #8]
		GPIOC->OSPEEDR |= (copy_u8Speed << (copy_u8PIN * 2));
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	7939      	ldrb	r1, [r7, #4]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	0052      	lsls	r2, r2, #1
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <MGPIO_voidSetPinDirection+0xa60>)
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	6093      	str	r3, [r2, #8]
		break;
 8000fea:	bf00      	nop
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc90      	pop	{r4, r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40020800 	.word	0x40020800

08000ffc <MGPIO_voidSetAF>:
	}
	return local_u8PinValue;
}

void MGPIO_voidSetAF(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8AlternateFunctionNo)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	460b      	mov	r3, r1
 8001008:	71bb      	strb	r3, [r7, #6]
 800100a:	4613      	mov	r3, r2
 800100c:	717b      	strb	r3, [r7, #5]
	switch (copy_u8PORT)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d03e      	beq.n	8001092 <MGPIO_voidSetAF+0x96>
 8001014:	2b02      	cmp	r3, #2
 8001016:	dc58      	bgt.n	80010ca <MGPIO_voidSetAF+0xce>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <MGPIO_voidSetAF+0x26>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d01c      	beq.n	800105a <MGPIO_voidSetAF+0x5e>
		{
			GPIOC->AFRH |= (copy_u8AlternateFunctionNo<<((copy_u8PIN-8)*4));
		}
		break;
	}
}
 8001020:	e053      	b.n	80010ca <MGPIO_voidSetAF+0xce>
		if (copy_u8PIN<8)
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b07      	cmp	r3, #7
 8001026:	d80b      	bhi.n	8001040 <MGPIO_voidSetAF+0x44>
			GPIOA->AFRL |= (copy_u8AlternateFunctionNo<<(copy_u8PIN*4));
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MGPIO_voidSetAF+0xdc>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	7979      	ldrb	r1, [r7, #5]
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4611      	mov	r1, r2
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <MGPIO_voidSetAF+0xdc>)
 800103a:	430b      	orrs	r3, r1
 800103c:	6213      	str	r3, [r2, #32]
		break;
 800103e:	e044      	b.n	80010ca <MGPIO_voidSetAF+0xce>
			GPIOA->AFRH |= (copy_u8AlternateFunctionNo<<((copy_u8PIN-8)*4));
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MGPIO_voidSetAF+0xdc>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	7979      	ldrb	r1, [r7, #5]
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	3a08      	subs	r2, #8
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	4611      	mov	r1, r2
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MGPIO_voidSetAF+0xdc>)
 8001054:	430b      	orrs	r3, r1
 8001056:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8001058:	e037      	b.n	80010ca <MGPIO_voidSetAF+0xce>
		if (copy_u8PIN<8)
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d80b      	bhi.n	8001078 <MGPIO_voidSetAF+0x7c>
			GPIOB->AFRL |= (copy_u8AlternateFunctionNo<<(copy_u8PIN*4));
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MGPIO_voidSetAF+0xe0>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	7979      	ldrb	r1, [r7, #5]
 8001066:	79ba      	ldrb	r2, [r7, #6]
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4611      	mov	r1, r2
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <MGPIO_voidSetAF+0xe0>)
 8001072:	430b      	orrs	r3, r1
 8001074:	6213      	str	r3, [r2, #32]
		break;
 8001076:	e028      	b.n	80010ca <MGPIO_voidSetAF+0xce>
			GPIOB->AFRH |= (copy_u8AlternateFunctionNo<<((copy_u8PIN-8)*4));
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MGPIO_voidSetAF+0xe0>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	7979      	ldrb	r1, [r7, #5]
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	3a08      	subs	r2, #8
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <MGPIO_voidSetAF+0xe0>)
 800108c:	430b      	orrs	r3, r1
 800108e:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8001090:	e01b      	b.n	80010ca <MGPIO_voidSetAF+0xce>
		if (copy_u8PIN<8)
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d80b      	bhi.n	80010b0 <MGPIO_voidSetAF+0xb4>
			GPIOC->AFRL |= (copy_u8AlternateFunctionNo<<(copy_u8PIN*4));
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MGPIO_voidSetAF+0xe4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	7979      	ldrb	r1, [r7, #5]
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	4611      	mov	r1, r2
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <MGPIO_voidSetAF+0xe4>)
 80010aa:	430b      	orrs	r3, r1
 80010ac:	6213      	str	r3, [r2, #32]
		break;
 80010ae:	e00b      	b.n	80010c8 <MGPIO_voidSetAF+0xcc>
			GPIOC->AFRH |= (copy_u8AlternateFunctionNo<<((copy_u8PIN-8)*4));
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MGPIO_voidSetAF+0xe4>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	7979      	ldrb	r1, [r7, #5]
 80010b6:	79ba      	ldrb	r2, [r7, #6]
 80010b8:	3a08      	subs	r2, #8
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MGPIO_voidSetAF+0xe4>)
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80010c8:	bf00      	nop
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800

080010e4 <HexParser_u8Ascii2Num>:

#define BASE_ADDRESS		0x08000000

uint16_t FlashData[100];
static u8 HexParser_u8Ascii2Num(u8 Copy_u8Ascii)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Return = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8Ascii >= '0' && Copy_u8Ascii <= '9')
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b2f      	cmp	r3, #47	; 0x2f
 80010f6:	d906      	bls.n	8001106 <HexParser_u8Ascii2Num+0x22>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b39      	cmp	r3, #57	; 0x39
 80010fc:	d803      	bhi.n	8001106 <HexParser_u8Ascii2Num+0x22>
	{
		/*'0'=48 ,, so '0'-48 = (0) as decimal or hexa*/
		Local_u8Return = Copy_u8Ascii - '0';
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	3b30      	subs	r3, #48	; 0x30
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e008      	b.n	8001118 <HexParser_u8Ascii2Num+0x34>
	}
	else if(Copy_u8Ascii >='A' && Copy_u8Ascii <='F') //In checksum
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b40      	cmp	r3, #64	; 0x40
 800110a:	d905      	bls.n	8001118 <HexParser_u8Ascii2Num+0x34>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b46      	cmp	r3, #70	; 0x46
 8001110:	d802      	bhi.n	8001118 <HexParser_u8Ascii2Num+0x34>
	{
		/* 'A'-10 = 55 ,sense A = 10 as a hexa to decimal value,
		 * So by 'A' - 55 = 10 = (A) as a decimal  */
		Local_u8Return = Copy_u8Ascii - 55;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b37      	subs	r3, #55	; 0x37
 8001116:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8Return;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HexParser_vParseData>:

/*   : 02 0000 04 0800 F2  --> Record 1*/
/*   : 10 4000 00  0000 0120 1D48 0008 9D47 0008 A347 0008 44 --> Record 2*/
/*   : 10 4010 00  A947 0008 AF47 0008 B547 0008 0000 0000 A6 --> Record 3*/
void HexParser_vParseData(uint8_t *Data)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	/* Calculate record address */
	uint32_t Address = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
	uint8_t i;
	uint8_t digit0 , digit1 , digit2 , digit3;

	/* As for record 2--> 4000 i want to take each element as decimal to OR with the base address */
	digit0 = HexParser_u8Ascii2Num(Data[3]);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3303      	adds	r3, #3
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffd2 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
	digit1 = HexParser_u8Ascii2Num(Data[4]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3304      	adds	r3, #4
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffca 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001150:	4603      	mov	r3, r0
 8001152:	73bb      	strb	r3, [r7, #14]
	digit2 = HexParser_u8Ascii2Num(Data[5]);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3305      	adds	r3, #5
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffc2 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001160:	4603      	mov	r3, r0
 8001162:	737b      	strb	r3, [r7, #13]
	digit3 = HexParser_u8Ascii2Num(Data[6]);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3306      	adds	r3, #6
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffba 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001170:	4603      	mov	r3, r0
 8001172:	733b      	strb	r3, [r7, #12]

    /* After this operation the address of record 2 will be 0x0800 4000*/
	Address = (BASE_ADDRESS | (digit0 << 12)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	031b      	lsls	r3, r3, #12
 8001178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
							| (digit1 << 8)
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	431a      	orrs	r2, r3
							| (digit2 << 4)
 8001182:	7b7b      	ldrb	r3, [r7, #13]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	431a      	orrs	r2, r3
							| digit3);
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
	Address = (BASE_ADDRESS | (digit0 << 12)
 800118c:	613b      	str	r3, [r7, #16]

	/* Calculate Length */
	uint8_t Length_Low , Length_High , Length;
	Length_Low = HexParser_u8Ascii2Num(Data[2]);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3302      	adds	r3, #2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffa5 	bl	80010e4 <HexParser_u8Ascii2Num>
 800119a:	4603      	mov	r3, r0
 800119c:	72fb      	strb	r3, [r7, #11]
	Length_High = HexParser_u8Ascii2Num(Data[1]);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3301      	adds	r3, #1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff9d 	bl	80010e4 <HexParser_u8Ascii2Num>
 80011aa:	4603      	mov	r3, r0
 80011ac:	72bb      	strb	r3, [r7, #10]

	/* The length(in record 2) = 16 which is the actual black data which also means 16 byte
	 * but the array that will be sent by the API: FMI_voidFlashWrite is u16 type
	 * so every element in the sent array is 2 bytes,, so the length being sent to the
	 * API is the calculated length/2 */
	Length = (Length_High << 4) | Length_Low;
 80011ae:	7abb      	ldrb	r3, [r7, #10]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	727b      	strb	r3, [r7, #9]

	/* Store data in FlashArray  */
	for(i = 0; i < Length/2; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]
 80011c2:	e044      	b.n	800124e <HexParser_vParseData+0x126>
	{
		digit0 = HexParser_u8Ascii2Num(Data[(4*i)+9]);
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	3309      	adds	r3, #9
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff87 	bl	80010e4 <HexParser_u8Ascii2Num>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
		digit1 = HexParser_u8Ascii2Num(Data[(4*i)+10]);
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	330a      	adds	r3, #10
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff7c 	bl	80010e4 <HexParser_u8Ascii2Num>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73bb      	strb	r3, [r7, #14]
		digit2 = HexParser_u8Ascii2Num(Data[(4*i)+11]);
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	330b      	adds	r3, #11
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff71 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001202:	4603      	mov	r3, r0
 8001204:	737b      	strb	r3, [r7, #13]
		digit3 = HexParser_u8Ascii2Num(Data[(4*i)+12]);
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	330c      	adds	r3, #12
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff66 	bl	80010e4 <HexParser_u8Ascii2Num>
 8001218:	4603      	mov	r3, r0
 800121a:	733b      	strb	r3, [r7, #12]
		FlashData[i] = (  (digit0 << 12)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	031b      	lsls	r3, r3, #12
						| (digit1 << 8)
 8001220:	b21a      	sxth	r2, r3
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
						| (digit2 << 4)
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
						|  digit3);
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b21a      	sxth	r2, r3
		FlashData[i] = (  (digit0 << 12)
 800123e:	7dfb      	ldrb	r3, [r7, #23]
						|  digit3);
 8001240:	b291      	uxth	r1, r2
		FlashData[i] = (  (digit0 << 12)
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HexParser_vParseData+0x14c>)
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i = 0; i < Length/2; i++)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	3301      	adds	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
 800124e:	7a7b      	ldrb	r3, [r7, #9]
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	7dfa      	ldrb	r2, [r7, #23]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3b4      	bcc.n	80011c4 <HexParser_vParseData+0x9c>
	}


	/* Flashing data */
	FMI_voidFlashWrite(Address, FlashData, Length/2);
 800125a:	7a7b      	ldrb	r3, [r7, #9]
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	4903      	ldr	r1, [pc, #12]	; (8001274 <HexParser_vParseData+0x14c>)
 8001266:	6938      	ldr	r0, [r7, #16]
 8001268:	f7ff f934 	bl	80004d4 <FMI_voidFlashWrite>


}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000020 	.word	0x20000020

08001278 <MRCC_voidInit>:
/* o/p arguments:Nothing               */
/* Desc. : This API allows user to     */
/*select the clk source of the system  */
/***************************************/
void MRCC_voidInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
#if SYS_CLK_SRC == HSI
	//Turn On HSI
	SET_BIT(RCC_CR,0);
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MRCC_voidInit+0x34>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <MRCC_voidInit+0x34>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]
	//Set SysClk as HSI
	CLR_BIT(RCC_CFGR,0);
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MRCC_voidInit+0x38>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <MRCC_voidInit+0x38>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,1);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MRCC_voidInit+0x38>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <MRCC_voidInit+0x38>)
 800129a:	f023 0302 	bic.w	r3, r3, #2
 800129e:	6013      	str	r3, [r2, #0]
#elif SYS_CLK_SRC == PLL
	//Turn On HSI
	SET_BIT(RCC_CR,24);
	//Set SysClk as PLL
#endif
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40023808 	.word	0x40023808

080012b4 <MRCC_voidEnablePerClk>:
/* o/p arguments:Nothing                  */
/* Desc. : This API allows user to        */
/*Enable the clk source of the Peripherals*/
/******************************************/
void MRCC_voidEnablePerClk(u8 A_u8BusId,u8 A_u8PerId)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
	//i/p Valiation
	if((A_u8BusId > APB2) || (A_u8PerId > 31))
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d840      	bhi.n	800134c <MRCC_voidEnablePerClk+0x98>
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	2b1f      	cmp	r3, #31
 80012ce:	d83d      	bhi.n	800134c <MRCC_voidEnablePerClk+0x98>
	{
		//Do Nothing
	}
	else
	{
		switch(A_u8BusId)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d83a      	bhi.n	800134c <MRCC_voidEnablePerClk+0x98>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <MRCC_voidEnablePerClk+0x28>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	08001303 	.word	0x08001303
 80012e4:	0800131f 	.word	0x0800131f
 80012e8:	08001335 	.word	0x08001335
		{
		case AHB1:
			SET_BIT(RCC_AHB1ENR,A_u8PerId);
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MRCC_voidEnablePerClk+0xa4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	79ba      	ldrb	r2, [r7, #6]
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4611      	mov	r1, r2
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <MRCC_voidEnablePerClk+0xa4>)
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
			break;
 8001300:	e024      	b.n	800134c <MRCC_voidEnablePerClk+0x98>
		case AHB2:
			if(A_u8PerId != 7)
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	2b07      	cmp	r3, #7
 8001306:	d120      	bne.n	800134a <MRCC_voidEnablePerClk+0x96>
			{
				//Do Nothing
			}
			else
			{
				SET_BIT(RCC_AHB2ENR,A_u8PerId);
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MRCC_voidEnablePerClk+0xa8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4611      	mov	r1, r2
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <MRCC_voidEnablePerClk+0xa8>)
 8001318:	430b      	orrs	r3, r1
 800131a:	6013      	str	r3, [r2, #0]
			}

			break;
 800131c:	e015      	b.n	800134a <MRCC_voidEnablePerClk+0x96>
		case APB1:
			SET_BIT(RCC_APB1ENR,A_u8PerId);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MRCC_voidEnablePerClk+0xac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	79ba      	ldrb	r2, [r7, #6]
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4611      	mov	r1, r2
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <MRCC_voidEnablePerClk+0xac>)
 800132e:	430b      	orrs	r3, r1
 8001330:	6013      	str	r3, [r2, #0]
			break;
 8001332:	e00b      	b.n	800134c <MRCC_voidEnablePerClk+0x98>
		case APB2:
			SET_BIT(RCC_APB2ENR,A_u8PerId);
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MRCC_voidEnablePerClk+0xac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	79ba      	ldrb	r2, [r7, #6]
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	4611      	mov	r1, r2
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <MRCC_voidEnablePerClk+0xac>)
 8001344:	430b      	orrs	r3, r1
 8001346:	6013      	str	r3, [r2, #0]
			break;
 8001348:	e000      	b.n	800134c <MRCC_voidEnablePerClk+0x98>
			break;
 800134a:	bf00      	nop
		}
	}
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40023830 	.word	0x40023830
 800135c:	40023834 	.word	0x40023834
 8001360:	40023840 	.word	0x40023840

08001364 <MRCC_voidEnableLOWPerClk>:
/* o/p arguments:Nothing                        */
/* Desc. : This API allows user to              */
/*enable clk source of the low power Peripherals*/
/************************************************/
void MRCC_voidEnableLOWPerClk(u8 A_u8BusId,u8 A_u8PerId)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	71fb      	strb	r3, [r7, #7]
 8001370:	4613      	mov	r3, r2
 8001372:	71bb      	strb	r3, [r7, #6]
	//i/p Valiation
	if((A_u8BusId > APB2) || (A_u8PerId > 31))
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d840      	bhi.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b1f      	cmp	r3, #31
 800137e:	d83d      	bhi.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
	{
		//Do Nothing
	}
	else
	{
		switch(A_u8BusId)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d83a      	bhi.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <MRCC_voidEnableLOWPerClk+0x28>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013b3 	.word	0x080013b3
 8001394:	080013cf 	.word	0x080013cf
 8001398:	080013e5 	.word	0x080013e5
		{
		case AHB1:
			SET_BIT(RCC_AHB1LPENR,A_u8PerId);
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MRCC_voidEnableLOWPerClk+0xa4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	79ba      	ldrb	r2, [r7, #6]
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4611      	mov	r1, r2
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <MRCC_voidEnableLOWPerClk+0xa4>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6013      	str	r3, [r2, #0]
			break;
 80013b0:	e024      	b.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
		case AHB2:
			if(A_u8PerId != 7)
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	d120      	bne.n	80013fa <MRCC_voidEnableLOWPerClk+0x96>
			{
				//Do Nothing
			}
			else
			{
				SET_BIT(RCC_AHB2LPENR,A_u8PerId);
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MRCC_voidEnableLOWPerClk+0xa8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	4611      	mov	r1, r2
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <MRCC_voidEnableLOWPerClk+0xa8>)
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6013      	str	r3, [r2, #0]
			}

			break;
 80013cc:	e015      	b.n	80013fa <MRCC_voidEnableLOWPerClk+0x96>
		case APB1:
			SET_BIT(RCC_APB1LPENR,A_u8PerId);
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MRCC_voidEnableLOWPerClk+0xac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	4611      	mov	r1, r2
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <MRCC_voidEnableLOWPerClk+0xac>)
 80013de:	430b      	orrs	r3, r1
 80013e0:	6013      	str	r3, [r2, #0]
			break;
 80013e2:	e00b      	b.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
		case APB2:
			SET_BIT(RCC_APB2LPENR,A_u8PerId);
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MRCC_voidEnableLOWPerClk+0xb0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <MRCC_voidEnableLOWPerClk+0xb0>)
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
			break;
 80013f8:	e000      	b.n	80013fc <MRCC_voidEnableLOWPerClk+0x98>
			break;
 80013fa:	bf00      	nop
		}
	}


}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023850 	.word	0x40023850
 800140c:	40023854 	.word	0x40023854
 8001410:	40023860 	.word	0x40023860
 8001414:	40023864 	.word	0x40023864

08001418 <MSTK_vInit>:
static u8   G_u8SingleFlag ;



void MSTK_vInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
#if STK_CLK_SOURCE == STK_AHB
	SET_BIT(STK->CTRL, CLKSOURCE) ;
#endif
	/* 2- Interrupt enable or disable*/
#if STK_INTERRPUT_EN==ENABLE
	SET_BIT(STK->CTRL, TICKINT) ;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <MSTK_vInit+0x1c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <MSTK_vInit+0x1c>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	6013      	str	r3, [r2, #0]
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <MSTK_vStopTimer>:



void MSTK_vStopTimer(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	 CLR_BIT(STK->CTRL, STK_ENABLE);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MSTK_vStopTimer+0x20>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <MSTK_vStopTimer+0x20>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]
	 STK->VAL = 0;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <MSTK_vStopTimer+0x20>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e010 	.word	0xe000e010

0800145c <MSTK_vSetInterval_single>:
	/* 5-  Stop the timer   */
	CLR_BIT(STK->CTRL, STK_ENABLE);
}

void MSTK_vSetInterval_single(u32 A_u32Ticks, void (*CallbackFunction)(void))
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	/* 0- set Callback function */
	GS_STK_Callback = CallbackFunction ;
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <MSTK_vSetInterval_single+0x3c>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6013      	str	r3, [r2, #0]
	G_u8SingleFlag = 1 ;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MSTK_vSetInterval_single+0x40>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
	/* 1- reset timer value */
	STK->VAL = 0 ;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MSTK_vSetInterval_single+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	/* 2- Load timer with Value */
	STK->LOAD = A_u32Ticks ;
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <MSTK_vSetInterval_single+0x44>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6053      	str	r3, [r2, #4]
	/* 3- Start the timer   */
	SET_BIT(STK->CTRL, STK_ENABLE);
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MSTK_vSetInterval_single+0x44>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <MSTK_vSetInterval_single+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200000e8 	.word	0x200000e8
 800149c:	200000ec 	.word	0x200000ec
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <SysTick_Handler>:
	return STK->VAL ;
}


void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	if(GS_STK_Callback != NULL)
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <SysTick_Handler+0x30>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <SysTick_Handler+0x12>
	{
		GS_STK_Callback();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <SysTick_Handler+0x30>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4798      	blx	r3
	}
	if(G_u8SingleFlag)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <SysTick_Handler+0x34>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <SysTick_Handler+0x2c>
	{
		G_u8SingleFlag = 0 ;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SysTick_Handler+0x34>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		/* 5-  Stop the timer   */
		CLR_BIT(STK->CTRL, STK_ENABLE);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Handler+0x38>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <SysTick_Handler+0x38>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
	}
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000e8 	.word	0x200000e8
 80014d8:	200000ec 	.word	0x200000ec
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <MUSART_voidInit>:
void (*MUSART6_CallBack)(void);



void MUSART_voidInit(USART_InitType *A_InitStruct,USART_ClockInitTypeDef *A_ClockInitStruct,USART_t *USARTx)
{
 80014e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e4:	b090      	sub	sp, #64	; 0x40
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80014ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80014ec:	637a      	str	r2, [r7, #52]	; 0x34
	switch (A_InitStruct->Oversampling)
 80014ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f0:	7a9b      	ldrb	r3, [r3, #10]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <MUSART_voidInit+0x1c>
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d075      	beq.n	80015e6 <MUSART_voidInit+0x106>
 80014fa:	e0da      	b.n	80016b2 <MUSART_voidInit+0x1d2>
	{
	case OVER_SAMPLING_16: USARTx->BRR = UART_BRR_SAMPLING16(__PCLK__,A_InitStruct->BaudRate); break;
 80014fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
 8001504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001512:	4629      	mov	r1, r5
 8001514:	008b      	lsls	r3, r1, #2
 8001516:	4621      	mov	r1, r4
 8001518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800151c:	4621      	mov	r1, r4
 800151e:	008a      	lsls	r2, r1, #2
 8001520:	a191      	add	r1, pc, #580	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 8001522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001526:	f7fe fe57 	bl	80001d8 <__aeabi_uldivmod>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4b90      	ldr	r3, [pc, #576]	; (8001770 <MUSART_voidInit+0x290>)
 8001530:	fba3 2302 	umull	r2, r3, r3, r2
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	011c      	lsls	r4, r3, #4
 8001538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	623b      	str	r3, [r7, #32]
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800154e:	4649      	mov	r1, r9
 8001550:	008b      	lsls	r3, r1, #2
 8001552:	4641      	mov	r1, r8
 8001554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001558:	4641      	mov	r1, r8
 800155a:	008a      	lsls	r2, r1, #2
 800155c:	a182      	add	r1, pc, #520	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 800155e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001562:	f7fe fe39 	bl	80001d8 <__aeabi_uldivmod>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4b81      	ldr	r3, [pc, #516]	; (8001770 <MUSART_voidInit+0x290>)
 800156c:	fba3 1302 	umull	r1, r3, r3, r2
 8001570:	095b      	lsrs	r3, r3, #5
 8001572:	2164      	movs	r1, #100	; 0x64
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	3332      	adds	r3, #50	; 0x32
 800157e:	4a7c      	ldr	r2, [pc, #496]	; (8001770 <MUSART_voidInit+0x290>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	095b      	lsrs	r3, r3, #5
 8001586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800158a:	441c      	add	r4, r3
 800158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	61fa      	str	r2, [r7, #28]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015a2:	4649      	mov	r1, r9
 80015a4:	008b      	lsls	r3, r1, #2
 80015a6:	4641      	mov	r1, r8
 80015a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ac:	4641      	mov	r1, r8
 80015ae:	008a      	lsls	r2, r1, #2
 80015b0:	a16d      	add	r1, pc, #436	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 80015b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b6:	f7fe fe0f 	bl	80001d8 <__aeabi_uldivmod>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <MUSART_voidInit+0x290>)
 80015c0:	fba3 1302 	umull	r1, r3, r3, r2
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	2164      	movs	r1, #100	; 0x64
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	3332      	adds	r3, #50	; 0x32
 80015d2:	4a67      	ldr	r2, [pc, #412]	; (8001770 <MUSART_voidInit+0x290>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	18e2      	adds	r2, r4, r3
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e065      	b.n	80016b2 <MUSART_voidInit+0x1d2>
	case OVER_SAMPLING_8 : USARTx->BRR = UART_BRR_SAMPLING8(__PCLK__,A_InitStruct->BaudRate); break;
 80015e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	461c      	mov	r4, r3
 80015ee:	4615      	mov	r5, r2
 80015f0:	1923      	adds	r3, r4, r4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	eb45 0305 	adc.w	r3, r5, r5
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015fe:	a15a      	add	r1, pc, #360	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 8001600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001604:	f7fe fde8 	bl	80001d8 <__aeabi_uldivmod>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4b58      	ldr	r3, [pc, #352]	; (8001770 <MUSART_voidInit+0x290>)
 800160e:	fba3 2302 	umull	r2, r3, r3, r2
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	011c      	lsls	r4, r3, #4
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	469a      	mov	sl, r3
 800161e:	4693      	mov	fp, r2
 8001620:	eb1a 030a 	adds.w	r3, sl, sl
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	eb4b 030b 	adc.w	r3, fp, fp
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001630:	a14d      	add	r1, pc, #308	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 8001632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001636:	f7fe fdcf 	bl	80001d8 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <MUSART_voidInit+0x290>)
 8001640:	fba3 1302 	umull	r1, r3, r3, r2
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	2164      	movs	r1, #100	; 0x64
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	3332      	adds	r3, #50	; 0x32
 8001652:	4a47      	ldr	r2, [pc, #284]	; (8001770 <MUSART_voidInit+0x290>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001660:	441c      	add	r4, r3
 8001662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	4698      	mov	r8, r3
 800166a:	4691      	mov	r9, r2
 800166c:	eb18 0308 	adds.w	r3, r8, r8
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	eb49 0309 	adc.w	r3, r9, r9
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800167c:	a13a      	add	r1, pc, #232	; (adr r1, 8001768 <MUSART_voidInit+0x288>)
 800167e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001682:	f7fe fda9 	bl	80001d8 <__aeabi_uldivmod>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <MUSART_voidInit+0x290>)
 800168c:	fba3 1302 	umull	r1, r3, r3, r2
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	2164      	movs	r1, #100	; 0x64
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	3332      	adds	r3, #50	; 0x32
 800169e:	4a34      	ldr	r2, [pc, #208]	; (8001770 <MUSART_voidInit+0x290>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	18e2      	adds	r2, r4, r3
 80016ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	bf00      	nop
	}

	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80016b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b4:	7a9b      	ldrb	r3, [r3, #10]
 80016b6:	03da      	lsls	r2, r3, #15
			      (A_InitStruct->HardwareFlowControl<<MUSART_CR1_UE_BIT)   |
 80016b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ba:	7a5b      	ldrb	r3, [r3, #9]
 80016bc:	035b      	lsls	r3, r3, #13
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80016be:	431a      	orrs	r2, r3
				  (A_InitStruct->DataWidth <<MUSART_CR1_M_BIT)             |
 80016c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	031b      	lsls	r3, r3, #12
			      (A_InitStruct->HardwareFlowControl<<MUSART_CR1_UE_BIT)   |
 80016c6:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Enable <<MUSART_CR1_PCE_BIT)       |
 80016c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ca:	799b      	ldrb	r3, [r3, #6]
 80016cc:	029b      	lsls	r3, r3, #10
				  (A_InitStruct->DataWidth <<MUSART_CR1_M_BIT)             |
 80016ce:	431a      	orrs	r2, r3
				  (A_InitStruct->Parity_Selection <<MUSART_CR1_PS_BIT)     ;
 80016d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d2:	79db      	ldrb	r3, [r3, #7]
 80016d4:	025b      	lsls	r3, r3, #9
				  (A_InitStruct->Parity_Enable <<MUSART_CR1_PCE_BIT)       |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	461a      	mov	r2, r3
	USARTx->CR1 = (A_InitStruct->Oversampling << MUSART_CR1_OVER8_BIT)     |
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	60da      	str	r2, [r3, #12]
	switch (A_InitStruct->TransferDirection)
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d014      	beq.n	8001710 <MUSART_voidInit+0x230>
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	dc1f      	bgt.n	800172a <MUSART_voidInit+0x24a>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <MUSART_voidInit+0x214>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d007      	beq.n	8001702 <MUSART_voidInit+0x222>
 80016f2:	e01a      	b.n	800172a <MUSART_voidInit+0x24a>
	{
	case TX_ONLY: SET_BIT(USARTx->CR1, MUSART_CR1_TE_BIT); break;
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f043 0208 	orr.w	r2, r3, #8
 80016fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	e013      	b.n	800172a <MUSART_voidInit+0x24a>
	case RX_ONLY: SET_BIT(USARTx->CR1, MUSART_CR1_RE_BIT); break;
 8001702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f043 0204 	orr.w	r2, r3, #4
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	e00c      	b.n	800172a <MUSART_voidInit+0x24a>
	case TX_RX:   SET_BIT(USARTx->CR1, MUSART_CR1_TE_BIT);
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f043 0208 	orr.w	r2, r3, #8
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	60da      	str	r2, [r3, #12]
				  SET_BIT(USARTx->CR1, MUSART_CR1_RE_BIT); break;
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f043 0204 	orr.w	r2, r3, #4
 8001724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	bf00      	nop
	}
	USARTx->CR2 =   (A_InitStruct->StopBits<<MUSART_CR2_STOP_BIT)				  |
 800172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172c:	795b      	ldrb	r3, [r3, #5]
 800172e:	031a      	lsls	r2, r3, #12
					(A_ClockInitStruct->ClockOutput <<MUSART_CR2_CLKEN_BIT)       |
 8001730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	02db      	lsls	r3, r3, #11
	USARTx->CR2 =   (A_InitStruct->StopBits<<MUSART_CR2_STOP_BIT)				  |
 8001736:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPhase <<MUSART_CR2_CPHA_BIT)         |
 8001738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173a:	789b      	ldrb	r3, [r3, #2]
 800173c:	025b      	lsls	r3, r3, #9
					(A_ClockInitStruct->ClockOutput <<MUSART_CR2_CLKEN_BIT)       |
 800173e:	431a      	orrs	r2, r3
					(A_ClockInitStruct->ClockPolarity <<MUSART_CR2_CPOL_BIT)      |
 8001740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	029b      	lsls	r3, r3, #10
					(A_ClockInitStruct->ClockPhase <<MUSART_CR2_CPHA_BIT)         |
 8001746:	431a      	orrs	r2, r3
					(A_ClockInitStruct->LastBitClockPulse <<MUSART_CR2_LBCL_BIT)  ;
 8001748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174a:	78db      	ldrb	r3, [r3, #3]
 800174c:	021b      	lsls	r3, r3, #8
					(A_ClockInitStruct->ClockPolarity <<MUSART_CR2_CPOL_BIT)      |
 800174e:	4313      	orrs	r3, r2
 8001750:	461a      	mov	r2, r3
	USARTx->CR2 =   (A_InitStruct->StopBits<<MUSART_CR2_STOP_BIT)				  |
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	611a      	str	r2, [r3, #16]

	USARTx->SR = 0																  ;
 8001756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	3740      	adds	r7, #64	; 0x40
 8001760:	46bd      	mov	sp, r7
 8001762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001766:	bf00      	nop
 8001768:	0bebc200 	.word	0x0bebc200
 800176c:	00000000 	.word	0x00000000
 8001770:	51eb851f 	.word	0x51eb851f

08001774 <MUSART_Enable>:


void MUSART_Enable(USART_t *USARTx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,MUSART_CR1_UE_BIT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <MUSART_voidTransmitByte>:
{
	CLR_BIT(USARTx->CR1,MUSART_CR1_UE_BIT);
}

void MUSART_voidTransmitByte (USART_t *USARTx,u8 A_u8Byte)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
	while (GET_BIT(USARTx->SR,MUSART_SR_TXE_BIT)==0);
 80017a0:	bf00      	nop
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f9      	beq.n	80017a2 <MUSART_voidTransmitByte+0xe>
	USARTx->DR= A_u8Byte;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	605a      	str	r2, [r3, #4]
	while (GET_BIT(USARTx->SR,MUSART_SR_TC_BIT)==0);
 80017b4:	bf00      	nop
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f9      	beq.n	80017b6 <MUSART_voidTransmitByte+0x22>
	CLR_BIT(USARTx->SR,MUSART_SR_TC_BIT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <MUSART_voidTransmitString>:


void MUSART_voidTransmitString (USART_t *USARTx, u8 * A_ptru8String )
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	u8 loc_u8Iterator =0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
	while (A_ptru8String[loc_u8Iterator] != '\0')
 80017e8:	e00a      	b.n	8001800 <MUSART_voidTransmitString+0x26>
	{
		MUSART_voidTransmitByte(USARTx, A_ptru8String[loc_u8Iterator]);
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffcd 	bl	8001794 <MUSART_voidTransmitByte>
		loc_u8Iterator++;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3301      	adds	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
	while (A_ptru8String[loc_u8Iterator] != '\0')
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ee      	bne.n	80017ea <MUSART_voidTransmitString+0x10>
	}
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <MUSART_u8ReceiveByteSynch>:
	return loc_u8Data;
}


u8 MUSART_u8ReceiveByteSynch( USART_t *USARTx , u8 *data)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
	u8 loc_u8Return = 1;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
	if((GET_BIT(USARTx->SR,MUSART_SR_RXNE_BIT)==1))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <MUSART_u8ReceiveByteSynch+0x28>
	{
		*data = USARTx->DR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e001      	b.n	8001842 <MUSART_u8ReceiveByteSynch+0x2c>
	}
	else
	{
		loc_u8Return = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
	}

	return loc_u8Return;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <USART1_IRQHandler>:
{
	MUSART6_CallBack = ptr ;
}

void USART1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	USART1 -> SR = 0 ;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <USART1_IRQHandler+0x14>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <USART1_IRQHandler+0x18>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4798      	blx	r3
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40011000 	.word	0x40011000
 8001868:	200000f0 	.word	0x200000f0

0800186c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	USART2 -> SR = 0 ;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <USART2_IRQHandler+0x14>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <USART2_IRQHandler+0x18>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4798      	blx	r3
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40014400 	.word	0x40014400
 8001884:	200000f4 	.word	0x200000f4

08001888 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	USART6 -> SR = 0 ;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <USART6_IRQHandler+0x14>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <USART6_IRQHandler+0x18>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4798      	blx	r3
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40011400 	.word	0x40011400
 80018a0:	200000f8 	.word	0x200000f8

080018a4 <App_code>:
uint8_t Data[50] = {0};
uint8_t  Local_u8UART_Status;
uint8_t counter = 0;
uint32_t i;
void App_code(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

	/*The vector table second element is the reset handler, but i want to execute it
	 * so I dereferenced the address 0x08004004 which calls the reset handler function
	 * which calls the main function of the app code in the end after initializing
	 * .bss by zero and so on*/
	uint32_t ResetHandlerAddress = *((volatile uint32_t*)(0x08004004));
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <App_code+0x1c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	607b      	str	r3, [r7, #4]
	App_code =  (void*)ResetHandlerAddress;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]

	/*Executing the reset handler*/
	App_code();
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4798      	blx	r3
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08004004 	.word	0x08004004

080018c4 <main>:

int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

	/* Init system Clock*/
	MRCC_voidInit();
 80018ca:	f7ff fcd5 	bl	8001278 <MRCC_voidInit>

	/* Enable Peripherals RCC clock*/
	MRCC_voidEnablePerClk(AHB1,0); //GPIOA
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fcef 	bl	80012b4 <MRCC_voidEnablePerClk>
	MRCC_voidEnableLOWPerClk(AHB1,15); //Flash driver
 80018d6:	210f      	movs	r1, #15
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fd43 	bl	8001364 <MRCC_voidEnableLOWPerClk>
	MRCC_voidEnablePerClk(APB2,4); //USART1
 80018de:	2104      	movs	r1, #4
 80018e0:	2003      	movs	r0, #3
 80018e2:	f7ff fce7 	bl	80012b4 <MRCC_voidEnablePerClk>

	/* UART INIT*/
	MGPIO_voidSetPinDirection(GPIOA_PORT, PIN9, AF_PUSH_PULL, MEDIUM_SPEED);
 80018e6:	2301      	movs	r3, #1
 80018e8:	220b      	movs	r2, #11
 80018ea:	2109      	movs	r1, #9
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7fe fe53 	bl	8000598 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA_PORT, PIN10, AF_PUSH_PULL, MEDIUM_SPEED);
 80018f2:	2301      	movs	r3, #1
 80018f4:	220b      	movs	r2, #11
 80018f6:	210a      	movs	r1, #10
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7fe fe4d 	bl	8000598 <MGPIO_voidSetPinDirection>

	/* SET PIN 9&10 PORTA as UART1 TX&RX */
	MGPIO_voidSetAF(GPIOA_PORT, PIN9, AF_UART);
 80018fe:	2207      	movs	r2, #7
 8001900:	2109      	movs	r1, #9
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fb7a 	bl	8000ffc <MGPIO_voidSetAF>
	MGPIO_voidSetAF(GPIOA_PORT, PIN10, AF_UART);
 8001908:	2207      	movs	r2, #7
 800190a:	210a      	movs	r1, #10
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fb75 	bl	8000ffc <MGPIO_voidSetAF>

	USART_InitType uart = {9600 , MODE_8BIT , STOP_BIT_1 , DISABLE , EVEN_PARITY , TX_RX,DISABLE , OVER_SAMPLING_16 };
 8001912:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <main+0xf0>)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	ca07      	ldmia	r2, {r0, r1, r2}
 8001918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	USART_ClockInitTypeDef UART_CLOCK = {DISABLE , 0,0,0};
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]

	MUSART_voidInit(&uart, &UART_CLOCK, USART1);
 8001920:	4639      	mov	r1, r7
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <main+0xf4>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fdda 	bl	80014e0 <MUSART_voidInit>
	MUSART_Enable(USART1);
 800192c:	4822      	ldr	r0, [pc, #136]	; (80019b8 <main+0xf4>)
 800192e:	f7ff ff21 	bl	8001774 <MUSART_Enable>

	/* STK INIT */
	MSTK_vInit();
 8001932:	f7ff fd71 	bl	8001418 <MSTK_vInit>
	MSTK_vSetInterval_single(50000000, App_code);
 8001936:	4921      	ldr	r1, [pc, #132]	; (80019bc <main+0xf8>)
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <main+0xfc>)
 800193a:	f7ff fd8f 	bl	800145c <MSTK_vSetInterval_single>

	while(1)
	{
		/* check if there is data received by UART */
		Local_u8UART_Status = MUSART_u8ReceiveByteSynch(USART1 ,&Data[counter]);
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <main+0x100>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <main+0x104>)
 8001946:	4413      	add	r3, r2
 8001948:	4619      	mov	r1, r3
 800194a:	481b      	ldr	r0, [pc, #108]	; (80019b8 <main+0xf4>)
 800194c:	f7ff ff63 	bl	8001816 <MUSART_u8ReceiveByteSynch>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <main+0x108>)
 8001956:	701a      	strb	r2, [r3, #0]
		if(Local_u8UART_Status == 1)
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <main+0x108>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d1ee      	bne.n	800193e <main+0x7a>
		{
			/* Disable STK */
			MSTK_vStopTimer();
 8001960:	f7ff fd6a 	bl	8001438 <MSTK_vStopTimer>
			 * and erasing the memory takes time that the tool will collapse
			 * But normally the memory should be erased */

			//Erase the memory you will fill

			if(Data[counter] == '\n')
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <main+0x100>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <main+0x104>)
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d110      	bne.n	8001994 <main+0xd0>
			{
				/* parsing Data */
				if(Data[8] == 4)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <main+0x104>)
 8001974:	7a1b      	ldrb	r3, [r3, #8]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d101      	bne.n	800197e <main+0xba>
				{
					__asm("NOP");
 800197a:	bf00      	nop
 800197c:	e002      	b.n	8001984 <main+0xc0>
				}
				else
				{
					HexParser_vParseData((uint8_t*)Data);
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <main+0x104>)
 8001980:	f7ff fbd2 	bl	8001128 <HexParser_vParseData>
				}

				/* Send ACK to sender tool */
				MUSART_voidTransmitString(USART1, (uint8_t*)msg);
 8001984:	4912      	ldr	r1, [pc, #72]	; (80019d0 <main+0x10c>)
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <main+0xf4>)
 8001988:	f7ff ff27 	bl	80017da <MUSART_voidTransmitString>

				/* Reset the counter to overwrite the array with the new record */
				counter = 0;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <main+0x100>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	e005      	b.n	80019a0 <main+0xdc>
			}
			else
			{
				counter++;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <main+0x100>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <main+0x100>)
 800199e:	701a      	strb	r2, [r3, #0]
			}

			/* Checking that the 8th index of the record is == '1' or not because
			 * the last record in the hex file has "01" as a record so '1' is the 8th element
			 * only in the end of record */
			if(Data[8] == '1')
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <main+0x104>)
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	2b31      	cmp	r3, #49	; 0x31
 80019a6:	d1ca      	bne.n	800193e <main+0x7a>
			{
				MSTK_vSetInterval_single(10000000, App_code);
 80019a8:	4904      	ldr	r1, [pc, #16]	; (80019bc <main+0xf8>)
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <main+0x110>)
 80019ac:	f7ff fd56 	bl	800145c <MSTK_vSetInterval_single>
		Local_u8UART_Status = MUSART_u8ReceiveByteSynch(USART1 ,&Data[counter]);
 80019b0:	e7c5      	b.n	800193e <main+0x7a>
 80019b2:	bf00      	nop
 80019b4:	08001a8c 	.word	0x08001a8c
 80019b8:	40011000 	.word	0x40011000
 80019bc:	080018a5 	.word	0x080018a5
 80019c0:	02faf080 	.word	0x02faf080
 80019c4:	2000012f 	.word	0x2000012f
 80019c8:	200000fc 	.word	0x200000fc
 80019cc:	2000012e 	.word	0x2000012e
 80019d0:	20000000 	.word	0x20000000
 80019d4:	00989680 	.word	0x00989680

080019d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	; (8001a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <LoopForever+0xe>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <LoopForever+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a06:	f000 f811 	bl	8001a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff ff5b 	bl	80018c4 <main>

08001a0e <LoopForever>:

LoopForever:
  b LoopForever
 8001a0e:	e7fe      	b.n	8001a0e <LoopForever>
  ldr   r0, =_estack
 8001a10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001a1c:	08001aa8 	.word	0x08001aa8
  ldr r2, =_sbss
 8001a20:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001a24:	20000130 	.word	0x20000130

08001a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <__libc_init_array>:
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4d0d      	ldr	r5, [pc, #52]	; (8001a64 <__libc_init_array+0x38>)
 8001a30:	4c0d      	ldr	r4, [pc, #52]	; (8001a68 <__libc_init_array+0x3c>)
 8001a32:	1b64      	subs	r4, r4, r5
 8001a34:	10a4      	asrs	r4, r4, #2
 8001a36:	2600      	movs	r6, #0
 8001a38:	42a6      	cmp	r6, r4
 8001a3a:	d109      	bne.n	8001a50 <__libc_init_array+0x24>
 8001a3c:	4d0b      	ldr	r5, [pc, #44]	; (8001a6c <__libc_init_array+0x40>)
 8001a3e:	4c0c      	ldr	r4, [pc, #48]	; (8001a70 <__libc_init_array+0x44>)
 8001a40:	f000 f818 	bl	8001a74 <_init>
 8001a44:	1b64      	subs	r4, r4, r5
 8001a46:	10a4      	asrs	r4, r4, #2
 8001a48:	2600      	movs	r6, #0
 8001a4a:	42a6      	cmp	r6, r4
 8001a4c:	d105      	bne.n	8001a5a <__libc_init_array+0x2e>
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
 8001a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a54:	4798      	blx	r3
 8001a56:	3601      	adds	r6, #1
 8001a58:	e7ee      	b.n	8001a38 <__libc_init_array+0xc>
 8001a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5e:	4798      	blx	r3
 8001a60:	3601      	adds	r6, #1
 8001a62:	e7f2      	b.n	8001a4a <__libc_init_array+0x1e>
 8001a64:	08001aa0 	.word	0x08001aa0
 8001a68:	08001aa0 	.word	0x08001aa0
 8001a6c:	08001aa0 	.word	0x08001aa0
 8001a70:	08001aa4 	.word	0x08001aa4

08001a74 <_init>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr

08001a80 <_fini>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	bf00      	nop
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr
